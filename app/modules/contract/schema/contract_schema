# app/modules/contract/schema/contract_schema.py

from datetime import datetime
from typing import Optional, List
from pydantic import BaseModel, UUID4, Field

# Enums
from app.modules.contract.enums.contract_enums import ContractStatusEnum
from app.modules.auth.enums.user_enums import UserRoleEnum
from app.modules.associations.enums.entity_type_enums import EntityTypeEnum

class ContractBase(BaseModel):
    contract_number: Optional[str]
    contract_type_id: int
    payment_type_id: int
    contract_status: ContractStatusEnum
    contract_details: str
    num_invoices: Optional[int] = 0
    payment_amount: float
    fee_percentage: float
    fee_amount: float
    date_signed: Optional[datetime] = None
    start_date: datetime
    end_date: datetime

class ContractCreateSchema(ContractBase):
    pass

class ContractUpdateSchema(BaseModel):
    contract_status: Optional[ContractStatusEnum]
    contract_details: Optional[str]
    num_invoices: Optional[int]
    payment_amount: Optional[float]
    fee_percentage: Optional[float]
    fee_amount: Optional[float]
    date_signed: Optional[datetime]
    start_date: Optional[datetime]
    end_date: Optional[datetime]

class ContractResponse(ContractBase):
    contract_id: UUID4
    assigned_users: Optional[List["ContractAssignmentResponse"]] = []
    media: Optional[List["MediaResponse"]] = []

    class Config:
        orm_mode = True

class ContractAssignmentResponse(BaseModel):
    contract_assignment_id: UUID4
    user_id: UUID4
    role: UserRoleEnum

    class Config:
        orm_mode = True

class MediaResponse(BaseModel):
    media_id: UUID4
    media_name: Optional[str]
    media_type: Optional[str]
    content_url: Optional[str]
    is_thumbnail: Optional[bool]
    caption: Optional[str]
    description: Optional[str]

    class Config:
        orm_mode = True
